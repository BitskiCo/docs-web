{
  "openapi": "3.0.3",
  "info": {
    "title": "NFT Service APIs",
    "description": "",
    "license": {
      "name": ""
    },
    "version": "2.0"
  },
  "servers": [
    {
      "url": "https://api.bitski.com"
    }
  ],
  "paths": {
    "/v1/apps/{app_id}/contracts": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "List all your contracts",
        "description": "List all your contracts",
        "operationId": "list_contracts",
        "parameters": [
          {
            "name": "includeTokenTemplates",
            "in": "query",
            "description": "Whether to include token templates in the response",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isDeployed",
            "in": "query",
            "description": "Filter by deployment status",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "includeWatched",
            "in": "query",
            "description": "Filter by access type",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "app_id",
            "in": "path",
            "description": "Your Bitski Application ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List contracts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "security": [
          {
            "oauth2": [
              "apps"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Creates the draft of a contract without deploying it.",
        "description": "Creates the draft of a contract without deploying it.\n\nFor external contract types like ZORA, \"create\" just imports it - you never will deploy it since its already deployed.",
        "operationId": "create_contract",
        "parameters": [
          {
            "name": "app_id",
            "in": "path",
            "description": "Your Bitski Application ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewContractRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "List contracts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "security": [
          {
            "oauth2": [
              "apps"
            ]
          }
        ]
      }
    },
    "/v1/apps/{app_id}/contracts/{contract_id}": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Get details about a contract",
        "description": "Get details about a contract",
        "operationId": "get_contract",
        "parameters": [
          {
            "name": "app_id",
            "in": "path",
            "description": "Your Bitski application ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "contract_id",
            "in": "path",
            "description": "Your contract id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contract details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "Contract not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": {
                    "message": "Not found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "apps"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Contracts"
        ],
        "summary": "Update a contract",
        "description": "Update a contract",
        "operationId": "patch_contract",
        "parameters": [
          {
            "name": "app_id",
            "in": "path",
            "description": "Your Bitski application ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "contract_id",
            "in": "path",
            "description": "Your contract id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated contract details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "Contract not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": {
                    "message": "Not found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "apps"
            ]
          }
        ]
      }
    },
    "/v1/claim-codes/{claim_code_id_or_code}": {
      "get": {
        "tags": [
          "Droplinks"
        ],
        "summary": "Get a claim code by its id or code",
        "description": "Get a claim code by its id or code",
        "operationId": "get",
        "parameters": [
          {
            "name": "claim_code_id_or_code",
            "in": "path",
            "description": "Claim code id or code",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "bcc5d460-bec9-43ad-952a-9641514a6e7b"
          }
        ],
        "responses": {
          "200": {
            "description": "Get details about a claim code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimCodeResponse"
                }
              }
            }
          },
          "404": {
            "description": "Contract not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": {
                    "message": "Not found"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Filter products by store",
        "description": "Filter products by store",
        "operationId": "list_products",
        "parameters": [
          {
            "name": "baseUrl",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "saleType",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SaleTypeQuery"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "sold",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "all",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0.0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0.0
            }
          },
          {
            "name": "includeUpcoming",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "liveAt",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List products",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/{product_id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product details",
        "description": "Get product details",
        "operationId": "get_product",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "The product id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "404": {
            "description": "Contract not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": {
                    "message": "Not found"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessType": {
        "type": "string",
        "enum": [
          "OWNED",
          "WATCHED"
        ]
      },
      "Attribute": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute key",
            "example": "Level"
          },
          "value": {
            "type": "string",
            "description": "Attribute value",
            "example": "3"
          }
        }
      },
      "Auction": {
        "type": "object",
        "required": [
          "tokenId",
          "status"
        ],
        "properties": {
          "auctionContractId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "endsAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuctionInfo"
              }
            ],
            "nullable": true
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "type": "string",
            "example": "CREATED"
          },
          "tokenId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "AuctionInfo": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/OnChainAuctionInfo"
          },
          {
            "$ref": "#/components/schemas/OffChainAuctionInfo"
          }
        ]
      },
      "ClaimCode": {
        "type": "object",
        "required": [
          "id",
          "createdAt"
        ],
        "properties": {
          "claimableType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimableType"
              }
            ],
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The code that can be used to claim",
            "example": "BIRDFAN2023",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the claim code was created"
          },
          "description": {
            "type": "string",
            "description": "The description of the claim code",
            "example": "A free bird NFT",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The claim code id"
          },
          "maxClaims": {
            "type": "integer",
            "format": "int64",
            "description": "The max amount of claims for this code",
            "example": 1,
            "nullable": true
          },
          "storeUsername": {
            "type": "string",
            "description": "The username of the store that made this claim code",
            "example": "nft_fans",
            "nullable": true
          }
        }
      },
      "ClaimCodeResponse": {
        "type": "object",
        "required": [
          "claimCode",
          "network",
          "tokenMetadata",
          "claimCodeThemes"
        ],
        "properties": {
          "claimCode": {
            "$ref": "#/components/schemas/ClaimCode"
          },
          "claimCodeThemes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimCodeTheme"
            },
            "description": "The theme for the claim code"
          },
          "network": {
            "type": "string",
            "description": "The ethereum network name",
            "example": "mainnet"
          },
          "tokenMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenMetadata"
            },
            "description": "The token metadata for the claim"
          }
        }
      },
      "ClaimCodeTheme": {
        "type": "object",
        "required": [
          "id",
          "appId"
        ],
        "properties": {
          "appId": {
            "type": "string",
            "format": "uuid",
            "description": "The app id of the claim code"
          },
          "backgroundImageUrl": {
            "type": "string",
            "description": "The claim code background image",
            "example": null,
            "nullable": true
          },
          "footerHtml": {
            "type": "string",
            "description": "The custom footer HTML",
            "example": "Find more tokens",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the claim code"
          },
          "linkColor": {
            "type": "string",
            "description": "The link color",
            "example": "#0101ff",
            "nullable": true
          },
          "linkHoverColor": {
            "type": "string",
            "description": "The link hover color",
            "example": "#01ff01",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "description": "The claim code logo",
            "example": null,
            "nullable": true
          },
          "postClaimRedirectButtonText": {
            "type": "string",
            "description": "The post claim redirect button text",
            "example": "Explore with your new token",
            "nullable": true
          },
          "postClaimRedirectButtonUrl": {
            "type": "string",
            "description": "The post claim redirect button url",
            "example": "https://www.bitski.com/explore",
            "nullable": true
          },
          "primaryBackgroundColor": {
            "type": "string",
            "description": "The primary background color",
            "example": "#0101ff",
            "nullable": true
          },
          "primaryButtonColor": {
            "type": "string",
            "description": "The primary button color",
            "example": "#01ff01",
            "nullable": true
          },
          "primaryButtonHoverColor": {
            "type": "string",
            "description": "The primary button hover color",
            "example": "#0101ff",
            "nullable": true
          },
          "primaryButtonTextColor": {
            "type": "string",
            "description": "The primary button text color",
            "example": "#01ff01",
            "nullable": true
          },
          "primaryTextColor": {
            "type": "string",
            "description": "The claim primary text color",
            "example": "#ff0101",
            "nullable": true
          },
          "progressBarActiveTextColor": {
            "type": "string",
            "description": "The progress bar active text color",
            "example": "#0101ff",
            "nullable": true
          },
          "progressBarBackgroundColor": {
            "type": "string",
            "description": "The progress bar background color",
            "example": "#0101ff",
            "nullable": true
          },
          "progressBarBorderColor": {
            "type": "string",
            "description": "The progress bar border color",
            "example": "#01ff01",
            "nullable": true
          },
          "progressBarColor": {
            "type": "string",
            "description": "The progress bar color",
            "example": "#01ff01",
            "nullable": true
          },
          "progressBarInactiveTextColor": {
            "type": "string",
            "description": "The progress bar inactive text color",
            "example": "#01ff01",
            "nullable": true
          },
          "secondaryBackgroundColor": {
            "type": "string",
            "description": "The secondary background color",
            "example": "#01ff01",
            "nullable": true
          },
          "secondaryButtonColor": {
            "type": "string",
            "description": "The secondary button color",
            "example": "#0101ff",
            "nullable": true
          },
          "secondaryButtonHoverColor": {
            "type": "string",
            "description": "The secondary button hover color",
            "example": "#01ff01",
            "nullable": true
          },
          "secondaryButtonTextColor": {
            "type": "string",
            "description": "The secondary button text color",
            "example": "#0101ff",
            "nullable": true
          },
          "secondaryTextColor": {
            "type": "string",
            "description": "The claim secondary text color",
            "example": "#01ff01",
            "nullable": true
          },
          "signInWithEthSetting": {
            "$ref": "#/components/schemas/SignInWithEthSetting"
          },
          "tertiaryTextColor": {
            "type": "string",
            "description": "The claim tertiary text color",
            "example": "#0101ff",
            "nullable": true
          }
        }
      },
      "ClaimableType": {
        "type": "string",
        "enum": [
          "RAFFLE",
          "DROP_LINK_GROUP"
        ]
      },
      "Contract": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContractType"
          },
          {
            "type": "object",
            "required": [
              "id",
              "deploymentState",
              "address",
              "network",
              "accessType"
            ],
            "properties": {
              "accessType": {
                "$ref": "#/components/schemas/AccessType"
              },
              "address": {
                "type": "string",
                "description": "The address of this contract",
                "example": "0x8b53d6e704485ef70bd02e2a91df126935a127c9"
              },
              "deploymentState": {
                "type": "string",
                "description": "The state of the contract",
                "example": "DEPLOYED"
              },
              "description": {
                "type": "string",
                "description": "The description of the contract",
                "example": "A collection of great NFTs",
                "nullable": true
              },
              "externalLink": {
                "type": "string",
                "description": "An optional link to the entity that owns the contract",
                "example": "https://www.bitski.com/@Stapleverse"
              },
              "fee": {
                "type": "string",
                "description": "The fee to deploy the contract",
                "example": "25.00"
              },
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The id of the contract"
              },
              "name": {
                "type": "string",
                "description": "The name of the contract",
                "example": "My NFT Collection",
                "nullable": true
              },
              "network": {
                "type": "string",
                "description": "The network this contract is minted on",
                "example": "mainnet"
              }
            }
          }
        ]
      },
      "ContractPatch": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "deploymentState"
            ],
            "properties": {
              "deploymentState": {
                "type": "string",
                "enum": [
                  "PENDING"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Deploys a proxy clone contract which points at a shared contract.\n\nCharges customer for the gas fee.",
            "required": [
              "proxyAdmin",
              "deploymentState"
            ],
            "properties": {
              "deploymentState": {
                "type": "string",
                "enum": [
                  "PENDING_PROXY"
                ]
              },
              "proxyAdmin": {
                "type": "string",
                "description": "The administrative address for the contract",
                "example": "0x137d9341d2d5311d5008d1eca56ce495ebad9538"
              }
            }
          },
          {
            "type": "object",
            "description": "Use upgrade proxy if there is a new base contract you want to point the contract to.",
            "required": [
              "logicAddress",
              "proxyAdmin",
              "deploymentState"
            ],
            "properties": {
              "deploymentState": {
                "type": "string",
                "enum": [
                  "PENDING_UPGRADE"
                ]
              },
              "logicAddress": {
                "type": "string",
                "description": "The new logic address        #[cfg_attr(feature = \"docs\", schema(value_type = String, example = \"0x137d9341d2d5311d5008d1eca56ce495ebad9538\"))]",
                "example": "0x4b88eab793d9715289bacbfccca26056c31cc8ad"
              },
              "proxyAdmin": {
                "type": "string",
                "description": "The new proxy admin",
                "example": "0x137d9341d2d5311d5008d1eca56ce495ebad9538"
              }
            }
          },
          {
            "type": "object",
            "description": "Mark a contract as deployed given a hash and receipt",
            "required": [
              "deploymentTransactionHash",
              "receipt",
              "deploymentState"
            ],
            "properties": {
              "deploymentState": {
                "type": "string",
                "enum": [
                  "DEPLOYED"
                ]
              },
              "deploymentTransactionHash": {
                "type": "string",
                "description": "the transaction hash of the deployment",
                "example": "0xdaa10785392d5bbe00cbd6d81d93a7bf9db197e2a335e613d9f4e89717d93a63"
              },
              "receipt": {
                "type": "object",
                "description": "the transaction receipt of the deployment"
              }
            }
          },
          {
            "type": "object",
            "description": "Mark the contract deployment as failed",
            "required": [
              "error",
              "deploymentState"
            ],
            "properties": {
              "deploymentState": {
                "type": "string",
                "enum": [
                  "FAILED"
                ]
              },
              "error": {
                "type": "string",
                "example": "contract creation code storage out of gas"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "deploymentState"
        }
      },
      "ContractPatchRequest": {
        "type": "object",
        "required": [
          "contract"
        ],
        "properties": {
          "contract": {
            "$ref": "#/components/schemas/ContractPatch"
          }
        }
      },
      "ContractResponse": {
        "type": "object",
        "required": [
          "contract"
        ],
        "properties": {
          "contract": {
            "$ref": "#/components/schemas/Contract"
          }
        }
      },
      "ContractType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "contractType"
            ],
            "properties": {
              "contractType": {
                "type": "string",
                "enum": [
                  "UNKNOWN"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "contractType"
            ],
            "properties": {
              "contractType": {
                "type": "string",
                "enum": [
                  "NON_FUNGIBLE_AUCTION"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "tokenTemplates",
              "contractType"
            ],
            "properties": {
              "contractType": {
                "type": "string",
                "enum": [
                  "NON_FUNGIBLE"
                ]
              },
              "tokenTemplates": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TokenTemplate"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "contractType"
            ],
            "properties": {
              "contractType": {
                "type": "string",
                "enum": [
                  "SEMI_FUNGIBLE"
                ]
              },
              "tokenTemplates": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TokenTemplate"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "contractType"
            ],
            "properties": {
              "contractType": {
                "type": "string",
                "enum": [
                  "ZORA_AUCTION"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "contractType"
        }
      },
      "ContractsResponse": {
        "type": "object",
        "required": [
          "contracts"
        ],
        "properties": {
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contract"
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Error response body",
        "required": [
          "code",
          "status",
          "request",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "description": "The status code for the error",
            "example": 401,
            "minimum": 0.0
          },
          "message": {
            "type": "string",
            "description": "The error message associated with the error",
            "example": "The request could not be authorized"
          },
          "request": {
            "type": "string",
            "format": "uuid",
            "description": "The request identifier"
          },
          "status": {
            "type": "string",
            "description": "The status code text for the error",
            "example": "Unauthorized"
          }
        }
      },
      "Gate": {
        "type": "object",
        "description": "Limits to who can buy the product",
        "required": [
          "id",
          "createdAt",
          "image",
          "name",
          "isActive",
          "isPublished",
          "filters"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp the gate was created"
          },
          "description": {
            "type": "string",
            "description": "The description of the gate",
            "example": "You must have a Bird token to continue",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GateFilter"
            },
            "description": "Gate filters"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the gate"
          },
          "image": {
            "type": "string",
            "description": "The image for the gate",
            "example": "https://cdn.bitskistatic.com/tokens-raw/54676382-bab5-408d-afe2-fc6f160da4a8/06fd0294-a425-44c7-96e8-9d24757163b4.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "If the gate is currently active"
          },
          "isPublished": {
            "type": "boolean",
            "description": "If the gate is published or a draft"
          },
          "name": {
            "type": "string",
            "description": "The name of the gate",
            "example": "Required Bird Token"
          }
        }
      },
      "GateFilter": {
        "type": "object",
        "required": [
          "id",
          "name",
          "createdAt",
          "contractId"
        ],
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attribute"
            },
            "description": "Attributes filtered by",
            "nullable": true
          },
          "contractId": {
            "type": "string",
            "format": "uuid",
            "description": "The contract for this gate"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Gate filter created date"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Gate filter id"
          },
          "name": {
            "type": "string",
            "description": "Gate filter name",
            "example": "Bird contract"
          },
          "tokenIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "the blockchain token id, hex or decimal format accepted",
            "example": [
              "0x1"
            ],
            "nullable": true
          }
        }
      },
      "NewContractParams": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContractType"
          },
          {
            "type": "object",
            "required": [
              "network"
            ],
            "properties": {
              "description": {
                "type": "string",
                "description": "Contract description",
                "example": "A collection of bird NFTs",
                "nullable": true
              },
              "externalLink": {
                "type": "string",
                "description": "A url for the entity that owns this contract",
                "example": "www.bitski.com/@stapleverse",
                "nullable": true
              },
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "An optional contract id",
                "nullable": true
              },
              "name": {
                "type": "string",
                "description": "The contract name",
                "example": "My Contract",
                "nullable": true
              },
              "network": {
                "type": "string",
                "description": "The ethereum network for this contract",
                "example": "mainnet"
              },
              "symbol": {
                "type": "string",
                "description": "Contract symbol",
                "example": "BIRD",
                "nullable": true
              }
            }
          }
        ]
      },
      "NewContractRequest": {
        "type": "object",
        "required": [
          "contract"
        ],
        "properties": {
          "contract": {
            "$ref": "#/components/schemas/NewContractParams"
          }
        }
      },
      "OffChainAuctionInfo": {
        "type": "object",
        "required": [
          "id",
          "tokenMetadata",
          "bids",
          "automaticSettlement",
          "currency"
        ],
        "properties": {
          "automaticSettlement": {
            "type": "boolean",
            "description": "Whether the auction can be settled after closing"
          },
          "bids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicOffChainBid"
            },
            "description": "Current bids"
          },
          "currency": {
            "type": "string",
            "description": "The currency in which auction bids are placed",
            "example": "USD"
          },
          "ended": {
            "type": "boolean",
            "description": "If the auction has ended"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The auction ID"
          },
          "minBid": {
            "type": "string",
            "description": "The minimum bid to start the auction",
            "example": "10.00"
          },
          "tokenMetadata": {
            "$ref": "#/components/schemas/TokenMetadata"
          }
        }
      },
      "OnChainAuctionInfo": {
        "type": "object",
        "required": [
          "id",
          "network",
          "tokenId",
          "tokenContractAddress",
          "auctionContractAddress",
          "tokenMetadata",
          "bids",
          "automaticSettlement",
          "auctionStandard"
        ],
        "properties": {
          "auctionContractAddress": {
            "type": "string",
            "description": "The address of the auction contract that facilitates the bidding",
            "example": "0xa4ef984773fd233c4cbed9cb1b905a3fa21e9461"
          },
          "auctionStandard": {
            "type": "string",
            "example": "NON_FUNGIBLE_AUCTION"
          },
          "automaticSettlement": {
            "type": "boolean"
          },
          "bids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnChainBid"
            }
          },
          "ended": {
            "type": "boolean"
          },
          "externalId": {
            "type": "string",
            "description": "External id is used when the bid comes from a third party auction like ZORA",
            "example": null,
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The auction ID"
          },
          "network": {
            "type": "string",
            "description": "The ethereum network name",
            "example": "mainnet"
          },
          "tokenContractAddress": {
            "type": "string",
            "description": "The address of the token contract that contains the token",
            "example": "0x0C3b9C785723B79Cf8D61a4A71E0ab5A00584772"
          },
          "tokenId": {
            "type": "string",
            "description": "The id of the token being auctioned",
            "example": "0x1"
          },
          "tokenMetadata": {
            "$ref": "#/components/schemas/TokenMetadata"
          }
        }
      },
      "OnChainBid": {
        "type": "object",
        "required": [
          "auctionId",
          "bidder",
          "amount",
          "transactionHash"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "example": "0x105b73c286c329a1"
          },
          "auctionId": {
            "type": "string",
            "format": "uuid"
          },
          "bidder": {
            "type": "string",
            "example": "22e693e7-befc-4c6f-a135-5f0029c556c2"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "currency": {
            "type": "string",
            "example": "0xa4ef984773fd233c4cbed9cb1b905a3fa21e9461"
          },
          "transactionHash": {
            "type": "string",
            "example": "0x76cbbfd0fa31059647017c28a0f855b6494b995ac77e1228064ba47debf0bb34"
          },
          "username": {
            "type": "string",
            "example": "nft_fan",
            "nullable": true
          }
        }
      },
      "Price": {
        "type": "object",
        "required": [
          "currency",
          "price"
        ],
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency for this price",
            "example": "USD"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The price id"
          },
          "price": {
            "type": "string",
            "description": "The amount each item costs",
            "example": "200.00"
          }
        }
      },
      "Product": {
        "type": "object",
        "required": [
          "id",
          "network",
          "tokenContractAddress",
          "tokenMetadata",
          "gatedContent",
          "totalSold",
          "prices",
          "auctions",
          "createdAt",
          "saleType",
          "isGated"
        ],
        "properties": {
          "auctions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Auction"
            },
            "description": "Auctions for this product's tokens"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date this product was created"
          },
          "gatedContent": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Content that is only accessible when owning the content",
            "example": [
              "FULL_RESOLUTION_IMAGE"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The product id"
          },
          "isGated": {
            "type": "boolean",
            "description": "If the product is gated or not"
          },
          "liveAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date this product goes live",
            "nullable": true
          },
          "network": {
            "type": "string",
            "description": "The ethereum network id",
            "example": "mainnet"
          },
          "previewAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date this product is previewable before it goes live",
            "nullable": true
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Price"
            },
            "description": "The available prices for this product"
          },
          "purchaseLink": {
            "type": "string",
            "description": "The link to purchase this product",
            "example": "https://www.bitski.com/@Stapleverse/products/staple-x-crocs-d0158741-f7d4-41a8-8a38-b652d8d43d5c",
            "nullable": true
          },
          "saleType": {
            "$ref": "#/components/schemas/SaleType"
          },
          "salesEndAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date this product's sales end",
            "nullable": true
          },
          "tokenContractAddress": {
            "type": "string",
            "description": "The token contract address",
            "example": "0xbd229ff702c5142e9b6d81648eeda7b7048b8cc9"
          },
          "tokenMetadata": {
            "$ref": "#/components/schemas/TokenMetadata"
          },
          "totalAvailable": {
            "type": "integer",
            "format": "int64",
            "description": "The total amount of tokens available",
            "example": 100,
            "nullable": true
          },
          "totalSold": {
            "type": "integer",
            "format": "int64",
            "description": "The total amount of tokens already sold",
            "example": 64
          },
          "username": {
            "type": "string",
            "description": "The username of the creator of this product",
            "example": "nft_creator",
            "nullable": true
          }
        }
      },
      "ProductResponse": {
        "type": "object",
        "required": [
          "product",
          "gates"
        ],
        "properties": {
          "gates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Gate"
            }
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          }
        }
      },
      "ProductsResponse": {
        "type": "object",
        "required": [
          "products"
        ],
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "PublicOffChainBid": {
        "type": "object",
        "required": [
          "auctionId",
          "currency",
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "example": "200.00"
          },
          "auctionId": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the auction"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp of the bid"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the bid",
            "example": "USD"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the bid"
          },
          "username": {
            "type": "string",
            "example": "nft_fan",
            "nullable": true
          }
        }
      },
      "SaleType": {
        "type": "string",
        "enum": [
          "LIMITED_EDITION",
          "OPEN_EDITION",
          "OFF_CHAIN_AUCTION",
          "ON_CHAIN_AUCTION"
        ]
      },
      "SaleTypeQuery": {
        "type": "string",
        "enum": [
          "EDITION",
          "LIMITED_EDITION",
          "OPEN_EDITION",
          "AUCTION",
          "OFF_CHAIN_AUCTION",
          "ON_CHAIN_AUCTION"
        ]
      },
      "SignInWithEthSetting": {
        "type": "string",
        "enum": [
          "DEFAULT",
          "DISABLED",
          "REQUIRE_SHADOW_ACCOUNT",
          "REQUIRE_FULL_ACCOUNT"
        ]
      },
      "TokenMetadata": {
        "type": "object",
        "properties": {
          "animation_url": {
            "type": "string",
            "description": "Token animation url",
            "example": null
          },
          "attributes": {
            "type": "array",
            "items": {},
            "description": "Token attributes",
            "example": null
          },
          "background_color": {
            "type": "string",
            "description": "Token background color",
            "example": null,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Token description",
            "example": "A very special NFT",
            "nullable": true
          },
          "external_url": {
            "type": "string",
            "description": "The url of the entity related to the token",
            "example": "https://www.bitski.com/@Stapleverse"
          },
          "image": {
            "type": "string",
            "description": "The token image",
            "example": "https://cdn.bitskistatic.com/tokens-raw/54676382-bab5-408d-afe2-fc6f160da4a8/06fd0294-a425-44c7-96e8-9d24757163b4.png",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Token name",
            "example": "NFT Token #1",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "description": "Token properties"
          },
          "youtube_url": {
            "type": "string",
            "description": "YouTube url associated with the token",
            "example": null
          }
        }
      },
      "TokenTemplate": {
        "type": "object",
        "description": "A template from which tokens will be created",
        "required": [
          "contractId"
        ],
        "properties": {
          "animationUrl": {
            "type": "string",
            "description": "The animation url the tokens will have",
            "example": null,
            "nullable": true
          },
          "contractId": {
            "type": "string",
            "format": "uuid",
            "description": "The contract id that tokens will be minted for"
          },
          "defaultMetadata": {
            "type": "object",
            "description": "Default metadata associated with each token"
          },
          "delayMinting": {
            "type": "boolean",
            "description": "If minting is delayed"
          },
          "description": {
            "type": "string",
            "description": "The description the tokens will have",
            "example": "A great token",
            "nullable": true
          },
          "gatedContent": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Content that is only available to the user who owns the token",
            "example": []
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the token template"
          },
          "image": {
            "type": "string",
            "description": "The image the tokens will have",
            "example": "https://cdn.bitskistatic.com/tokens-raw/54676382-bab5-408d-afe2-fc6f160da4a8/06fd0294-a425-44c7-96e8-9d24757163b4.png"
          },
          "isDropLink": {
            "type": "boolean",
            "description": "If this token is available as a drop link"
          },
          "liveAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time this token is available",
            "nullable": true
          },
          "maxTokens": {
            "type": "integer",
            "format": "int64",
            "description": "The maximum amount of tokens to mint",
            "example": 100,
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The description the tokens will have",
            "example": "Bird NFT",
            "nullable": true
          },
          "namingTemplate": {
            "type": "string",
            "description": "The naming convention for tokens minted via this template",
            "example": "DEFAULT"
          },
          "payouts": {
            "type": "object",
            "description": "The payout split when tokens are sold"
          },
          "previewAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time this token can be previewed before it is available",
            "nullable": true
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Price"
            },
            "description": "The prices at which to sell this token"
          },
          "published": {
            "type": "boolean",
            "description": "If this token is published or paused"
          },
          "salesEndAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time sales of this token end",
            "nullable": true
          },
          "totalTokens": {
            "type": "integer",
            "format": "int64",
            "description": "The total amount of tokens already minted",
            "example": 57
          }
        }
      }
    },
    "responses": {
      "UnauthorizedResponse": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://account.bitski.com/oauth2/token",
            "scopes": {
              "apps": "manage my applications"
            }
          }
        },
        "description": "Client credentials"
      }
    }
  }
}